"""initial schema

Revision ID: a17f14265837
Revises: 
Create Date: 2023-02-03 12:07:18.243267

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel  # Add support for SQLModel


# revision identifiers, used by Alembic.
revision = "a17f14265837"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "doctor",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("CRM", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("birth_date", sa.Date(), nullable=False),
        sa.Column("gender", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "emd_doctor",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("CRM", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("birth_date", sa.Date(), nullable=False),
        sa.Column("gender", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "hospital",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "medical_bed_type",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_medical_bed_type_name"), "medical_bed_type", ["name"], unique=True
    )
    op.create_table(
        "medical_specialty",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "patient",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("birth_date", sa.Date(), nullable=True),
        sa.Column("gender", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_patient_name"), "patient", ["name"], unique=False)
    op.create_table(
        "doctor_medical_specialty_link",
        sa.Column("doctor", sa.Integer(), nullable=False),
        sa.Column("medical_specialty", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["doctor"],
            ["doctor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["medical_specialty"],
            ["medical_specialty.id"],
        ),
        sa.PrimaryKeyConstraint("doctor", "medical_specialty"),
    )
    op.create_table(
        "medical_bed",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("AVAILABLE", "UNAVAILABLE", name="medicalbedstatus"),
            nullable=False,
        ),
        sa.Column("medical_bed_type_id", sa.Integer(), nullable=False),
        sa.Column("hospital_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["hospital_id"],
            ["hospital.id"],
        ),
        sa.ForeignKeyConstraint(
            ["medical_bed_type_id"],
            ["medical_bed_type.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transference_request",
        sa.Column("solicitation_datetime", sa.DateTime(), nullable=False),
        sa.Column("rationale", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("patient_id", sa.Integer(), nullable=False),
        sa.Column("requesting_doctor_id", sa.Integer(), nullable=False),
        sa.Column("emd_doctor_id", sa.Integer(), nullable=False),
        sa.Column("medical_bed_type_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["emd_doctor_id"],
            ["emd_doctor.id"],
        ),
        sa.ForeignKeyConstraint(
            ["medical_bed_type_id"],
            ["medical_bed_type.id"],
        ),
        sa.ForeignKeyConstraint(
            ["patient_id"],
            ["patient.id"],
        ),
        sa.ForeignKeyConstraint(
            ["requesting_doctor_id"],
            ["doctor.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transference_request")
    op.drop_table("medical_bed")
    op.drop_table("doctor_medical_specialty_link")
    op.drop_index(op.f("ix_patient_name"), table_name="patient")
    op.drop_table("patient")
    op.drop_table("medical_specialty")
    op.drop_index(op.f("ix_medical_bed_type_name"), table_name="medical_bed_type")
    op.drop_table("medical_bed_type")
    op.drop_table("hospital")
    op.drop_table("emd_doctor")
    op.drop_table("doctor")
    # ### end Alembic commands ###
